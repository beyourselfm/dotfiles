{
  "rfc": {
    "prefix": "mrfc",
    "body": [
      "export interface $0Props {",
      "  foo?: string",
      "}",
      "",
      "",
      "export function $0({ foo }:$0Props){",
      "  ",
      "",
      "  return <div></div>",
      "}",
      ""
    ],
    "description": "rfc"
  },
  "rcc": {
    "prefix": "mrfcc",
    "body": [
      "import cn from \"clsx\"",
      "",
      "export interface $0Props {",

      "}",
      "",
      "export function $0(props: $0Props) {",
      "",
      "  const classes = cls(\"\")",
      "  return <div className={classes}></div>",
      "}",
      ""
    ]
  },
  "create context": {
    "prefix": "mctx",
    "body": [
      "import { createContext, PropsWithChildren, ReactNode, useContext, useMemo } from 'react'",
      "",
      "type $1ProviderProps = { foo: string }",
      "",
      "type $1ContextValue = $1ProviderProps",
      "",
      "const $1Context = createContext<$1ContextValue | null>(null)",
      "",
      "export function $1Provider({ foo, children }: PropsWithChildren<$1ProviderProps>) {",
      "  const value = useMemo(()=> ({ foo }),[foo])",
      "  return <$1Context.Provider value={value}>{children}</$1Context.Provider>",
      "}",
      "",
      "export function use$1Context() {",
      "  const context = useContext($1Context)",
      "  if (!context) {",
      "    throw new Error('use$1 must be used within a $1Context provider')",
      "  }",
      "  return context",
      "}",
      ""
    ],
    "description": "create context"
  }
}
